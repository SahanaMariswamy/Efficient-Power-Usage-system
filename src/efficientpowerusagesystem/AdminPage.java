/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package efficientpowerusagesystem;

import static java.lang.System.exit;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import net.proteanit.sql.DbUtils;
/**
 *
 * @author mnpem
 */
public class AdminPage extends javax.swing.JFrame {

    /**
     * Creates new form AdminPage
     */
    Connection con = null;
    ResultSet rs = null;
    PreparedStatement pst = null;

    public AdminPage() {
        try {
            initComponents();
            query.addItem("Total number of users -");
            query.addItem("Average number of members -");
            query.addItem("Average power usage by household with members -");
            query.addItem("Minimum and Maximum power usage by user in city -");
            query.addItem("Users from city -");
            query.addItem("Users with household members -");
            query.addItem("Users impact on environment from co2 emitted by power usage -");
            query.addItem("User with Minimum cost of power who uses power source -");
            query.addItem("User with Maximum co2 emissions who uses power source -");
            query.addItem("Report on users who use power source -");
            optionbox.setVisible(false);
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/efficientpowerusagesystem", "root", "Niranjana98");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
        public void update_table(String sql){
        try {
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery(sql);
            table.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        query = new javax.swing.JComboBox<>();
        optionbox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setFont(new java.awt.Font("MS Gothic", 3, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 51, 0));
        jLabel9.setText("E");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, 29, -1));

        jLabel10.setFont(new java.awt.Font("MS Gothic", 1, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 51, 0));
        jLabel10.setText("Power");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, -1, -1));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(table);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 580, 310));

        query.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                queryItemStateChanged(evt);
            }
        });
        query.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                queryMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                queryMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                queryMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                queryMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                queryMouseReleased(evt);
            }
        });
        query.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                queryComponentShown(evt);
            }
        });
        jPanel1.add(query, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 380, -1));

        jPanel1.add(optionbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, 100, 20));

        jButton1.setBackground(new java.awt.Color(153, 153, 255));
        jButton1.setFont(new java.awt.Font("MS Gothic", 1, 17)); // NOI18N
        jButton1.setText("Check");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 110, -1, -1));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 480, -1, -1));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 480, 600, 10));

        jButton3.setBackground(new java.awt.Color(153, 153, 255));
        jButton3.setFont(new java.awt.Font("MS Gothic", 1, 18)); // NOI18N
        jButton3.setText("Sign Out");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 500, -1, -1));

        jLabel3.setFont(new java.awt.Font("MS Gothic", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Admin Page");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel56.setText("(User Statistics)");
        jPanel1.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 88, 600, -1));

        jButton4.setBackground(new java.awt.Color(153, 153, 255));
        jButton4.setFont(new java.awt.Font("MS Gothic", 1, 18)); // NOI18N
        jButton4.setText("Delete Accounts");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 500, -1, -1));

        jButton5.setBackground(new java.awt.Color(153, 153, 255));
        jButton5.setFont(new java.awt.Font("MS Gothic", 1, 18)); // NOI18N
        jButton5.setText("Update Cost");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 500, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        if(query.getSelectedItem().equals("Total number of users -")){
        String sql = "select count(*) as user_count from user";
        update_table(sql);
        }
        
        if(query.getSelectedItem().equals("Average number of members -")){
        String sql = "select avg(members) as average_members from user";
        update_table(sql);
        }
        
        if(query.getSelectedItem().equals("Average power usage by household with members -")){
        if(optionbox.getSelectedItem().equals("All")){
            String sql = "select avg(power_usage) as average_power_usage from user";
            update_table(sql);
        }
        else{
            String mem = (String) optionbox.getSelectedItem();
            int members = Integer.parseInt(mem);
            String sql = "select avg(power_usage) as average_power_usage from user where members="+members;
            update_table(sql);
        }
        
        }
        if(query.getSelectedItem().equals("Minimum and Maximum power usage by user in city -")){
        if(optionbox.getSelectedItem().equals("All")){
            String sql = "select min(power_usage) as minimum_power_usage,max(power_usage) as maximum_power_usage from user";
            update_table(sql);
        }
        else{
            String city = (String) optionbox.getSelectedItem();
            String sql = "select min(power_usage) as minimum_power_usage,max(power_usage) as maximum_power_usage from user where city='"+city+"'";
            update_table(sql);
        }
        
        }
        if(query.getSelectedItem().equals("Users from city -")){
        String city = (String) optionbox.getSelectedItem();
        String sql = "select username,members,power_usage,city from user where city='"+city+"'";
        update_table(sql);
        }
        
        if(query.getSelectedItem().equals("Users with household members -")){
        String mem = (String) optionbox.getSelectedItem();
        int members = Integer.parseInt(mem);
        String sql = "select username,members,power_usage,city from user where members="+members;
        update_table(sql);
        }
        
        if(query.getSelectedItem().equals("Users impact on environment from co2 emitted by power usage -")){
        String sql = "select u.username,cf.impact from user as u join hp_user as hu on hu.username=u.username join hydro_power as hp on hp.hp_level=hu.hp_level join carbon_footprint as cf on cf.cf_level=hp.cf_level union select u.username,cf.impact from user as u join tp_user as tu on tu.username=u.username join thermal_power as tp on tp.tp_level=tu.tp_level join carbon_footprint as cf on cf.cf_level=tp.cf_level union select u.username,cf.impact from user as u join rp_user as ru on ru.username=u.username join renewable_power as rp on rp.rp_level=ru.rp_level join carbon_footprint as cf on cf.cf_level=rp.cf_level union select u.username,cf.impact from user as u join np_user as nu on nu.username=u.username join nuclear_power as np on np.np_level=nu.np_level join carbon_footprint as cf on cf.cf_level=np.cf_level";
        update_table(sql);
        }
        
        if(query.getSelectedItem().equals("User with Minimum cost of power who uses power source -")){
        if(optionbox.getSelectedItem().equals("Hydro")){
            String sql = "select u.username,u.members,u.power_usage,u.city,u.power_usage*hp.hp_cost as price from user as u join hp_user as hu on hu.username=u.username join hydro_power as hp on hp.hp_level=hu.hp_level where u.power_usage*hp.hp_cost in(select min(u.power_usage*hp.hp_cost) from user as u join hp_user as hu on hu.username=u.username join hydro_power as hp on hp.hp_level=hu.hp_level)";
            update_table(sql);
        }
        if(optionbox.getSelectedItem().equals("Thermal")){
            String sql = "select u.username,u.members,u.power_usage,u.city,u.power_usage*tp.tp_cost as price from user as u join tp_user as tu on tu.username=u.username join thermal_power as tp on tp.tp_level=tu.tp_level where u.power_usage*tp.tp_cost in(select min(u.power_usage*tp.tp_cost) from user as u join tp_user as tu on tu.username=u.username join thermal_power as tp on tp.tp_level=tu.tp_level)";
            update_table(sql);
        }
        if(optionbox.getSelectedItem().equals("Renewable")){
            String sql = "select u.username,u.members,u.power_usage,u.city,u.power_usage*rp.rp_cost as price from user as u join rp_user as ru on ru.username=u.username join renewable_power as rp on rp.rp_level=ru.rp_level where u.power_usage*rp.rp_cost in(select min(u.power_usage*rp.rp_cost) from user as u join rp_user as ru on ru.username=u.username join renewable_power as rp on rp.rp_level=ru.rp_level)";
            update_table(sql);
        }
        if(optionbox.getSelectedItem().equals("Nuclear")){
            String sql = "select u.username,u.members,u.power_usage,u.city,u.power_usage*np.np_cost as price from user as u join np_user as nu on nu.username=u.username join nuclear_power as np on np.np_level=nu.np_level where u.power_usage*np.np_cost in(select min(u.power_usage*np.np_cost) from user as u join np_user as nu on nu.username=u.username join nuclear_power as np on np.np_level=nu.np_level)";
            update_table(sql);
        }
        }
        
        if(query.getSelectedItem().equals("User with Maximum co2 emissions who uses power source -")){
        if(optionbox.getSelectedItem().equals("Hydro")){
            String sql = "select u.username,u.members,u.power_usage,u.city,u.power_usage*cf.co2_emissions_minimum as co2_emissions from user as u join hp_user as hu on hu.username=u.username join hydro_power as hp on hp.hp_level=hu.hp_level join carbon_footprint as cf on hp.cf_level=cf.cf_level where u.power_usage*cf.co2_emissions_minimum in(select min(u.power_usage*cf.co2_emissions_minimum) from user as u join hp_user as hu on hu.username=u.username join hydro_power as hp on hp.hp_level=hu.hp_level join carbon_footprint as cf on hp.cf_level=cf.cf_level)";
            update_table(sql);
        }
        if(optionbox.getSelectedItem().equals("Thermal")){
            String sql = "select u.username,u.members,u.power_usage,u.city,u.power_usage*cf.co2_emissions_maximum as co2_emissions from user as u join tp_user as tu on tu.username=u.username join thermal_power as tp on tp.tp_level=tu.tp_level join carbon_footprint as cf on tp.cf_level=cf.cf_level where u.power_usage*cf.co2_emissions_minimum in(select min(u.power_usage*cf.co2_emissions_minimum) from user as u join tp_user as tu on tu.username=u.username join thermal_power as tp on tp.tp_level=tu.tp_level join carbon_footprint as cf on tp.cf_level=cf.cf_level)";
            update_table(sql);
        }
        if(optionbox.getSelectedItem().equals("Renewable")){
            String sql = "select u.username,u.members,u.power_usage,u.city,u.power_usage*cf.co2_emissions_minimum as co2_emissions from user as u join rp_user as ru on ru.username=u.username join renewable_power as rp on rp.rp_level=ru.rp_level join carbon_footprint as cf on rp.cf_level=cf.cf_level where u.power_usage*cf.co2_emissions_minimum in(select min(u.power_usage*cf.co2_emissions_minimum) from user as u join rp_user as ru on ru.username=u.username join renewable_power as rp on rp.rp_level=ru.rp_level join carbon_footprint as cf on rp.cf_level=cf.cf_level)";
            update_table(sql);
        }
        if(optionbox.getSelectedItem().equals("Nuclear")){
            String sql = "select u.username,u.members,u.power_usage,u.city,u.power_usage*cf.co2_emissions_maximum as co2_emissions from user as u join np_user as nu on nu.username=u.username join nuclear_power as np on np.np_level=nu.np_level join carbon_footprint as cf on np.cf_level=cf.cf_level where u.power_usage*cf.co2_emissions_minimum in(select min(u.power_usage*cf.co2_emissions_minimum) from user as u join np_user as nu on nu.username=u.username join nuclear_power as np on np.np_level=nu.np_level join carbon_footprint as cf on np.cf_level=cf.cf_level)";
            update_table(sql);
        }
        }
        
        if(query.getSelectedItem().equals("Report on users who use power source -")){
            if(optionbox.getSelectedItem().equals("All")){
            String sql = "select u.username,u.members,u.power_usage,u.city,hp.hp_cost*u.power_usage as price,cf.co2_emissions_minimum*u.power_usage as co2_emissions from user as u join hp_user as hu on hu.username=u.username join hydro_power as hp on hp.hp_level=hu.hp_level join carbon_footprint as cf on cf.cf_level=hp.cf_level where u.city='Bangalore' union select u.username,u.members,u.power_usage,u.city,tp.tp_cost*u.power_usage as price,cf.co2_emissions_maximum*u.power_usage as co2_emissions from user as u join tp_user as tu on tu.username=u.username join thermal_power as tp on tp.tp_level=tu.tp_level join carbon_footprint as cf on cf.cf_level=tp.cf_level where u.city='Delhi' or u.city='Mumbai' or u.city='Chennai' or u.city='Hyderabad' union select u.username,u.members,u.power_usage,u.city,rp.rp_cost*u.power_usage as price,cf.co2_emissions_minimum*u.power_usage as co2_emissions from user as u join rp_user as ru on ru.username=u.username join renewable_power as rp on rp.rp_level=ru.rp_level join carbon_footprint as cf on cf.cf_level=rp.cf_level where u.city='Ahmedabad' union select u.username,u.members,u.power_usage,u.city,np.np_cost*u.power_usage as price,cf.co2_emissions_maximum*u.power_usage as co2_emissions from user as u join np_user as nu on nu.username=u.username join nuclear_power as np on np.np_level=nu.np_level join carbon_footprint as cf on cf.cf_level=np.cf_level where u.city='Jaipur' or u.city='Kolkata'";
            update_table(sql);
            }
            if(optionbox.getSelectedItem().equals("Hydro")){
            String sql = "select u.username,u.members,u.power_usage,u.city,hp.hp_cost*u.power_usage as price,cf.co2_emissions_minimum*u.power_usage as co2_emissions from user as u join hp_user as hu on hu.username=u.username join hydro_power as hp on hp.hp_level=hu.hp_level join carbon_footprint as cf on cf.cf_level=hp.cf_level where u.city='Bangalore'";
            update_table(sql);
            }
            if(optionbox.getSelectedItem().equals("Thermal")){
            String sql = "select u.username,u.members,u.power_usage,u.city,tp.tp_cost*u.power_usage as price,cf.co2_emissions_maximum*u.power_usage as co2_emissions from user as u join tp_user as tu on tu.username=u.username join thermal_power as tp on tp.tp_level=tu.tp_level join carbon_footprint as cf on cf.cf_level=tp.cf_level where u.city='Delhi' or u.city='Mumbai' or u.city='Chennai' or u.city='Hyderabad'";
            update_table(sql);
            }
            if(optionbox.getSelectedItem().equals("Renewable")){
            String sql = "select u.username,u.members,u.power_usage,u.city,rp.rp_cost*u.power_usage as price,cf.co2_emissions_minimum*u.power_usage as co2_emissions from user as u join rp_user as ru on ru.username=u.username join renewable_power as rp on rp.rp_level=ru.rp_level join carbon_footprint as cf on cf.cf_level=rp.cf_level where u.city='Ahmedabad'";
            update_table(sql);
            }
            if(optionbox.getSelectedItem().equals("Nuclear")){
            String sql = "select u.username,u.members,u.power_usage,u.city,np.np_cost*u.power_usage as price,cf.co2_emissions_maximum*u.power_usage as co2_emissions from user as u join np_user as nu on nu.username=u.username join nuclear_power as np on np.np_level=nu.np_level join carbon_footprint as cf on cf.cf_level=np.cf_level where u.city='Jaipur' or u.city='Kolkata'";
            update_table(sql);
            }
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void queryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queryMouseReleased
        
    }//GEN-LAST:event_queryMouseReleased

    private void queryMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queryMousePressed
        
    }//GEN-LAST:event_queryMousePressed

    private void queryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queryMouseClicked
        
    }//GEN-LAST:event_queryMouseClicked

    private void queryMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queryMouseExited
        
    }//GEN-LAST:event_queryMouseExited

    private void queryMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queryMouseEntered
        
    }//GEN-LAST:event_queryMouseEntered

    private void queryComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_queryComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_queryComponentShown

    private void queryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_queryItemStateChanged
        optionbox.removeAllItems();
        if(query.getSelectedItem().equals("Average power usage by household with members -") || query.getSelectedItem().equals("Users with household members -")){
            optionbox.setVisible(true);
            if(query.getSelectedItem().equals("Average power usage by household with members -")){
            optionbox.addItem("All");
            }
            optionbox.addItem("1");
            optionbox.addItem("2");
            optionbox.addItem("3"); 
            optionbox.addItem("4");
            optionbox.addItem("5");
            optionbox.addItem("6");
            optionbox.addItem("7");
            }
        
        else if(query.getSelectedItem().equals("Minimum and Maximum power usage by user in city -") || query.getSelectedItem().equals("Users from city -")){
            optionbox.setVisible(true);
            if(query.getSelectedItem().equals("Minimum and Maximum power usage by user in city -")){
            optionbox.addItem("All");
            }
            optionbox.addItem("Ahmedabad");
            optionbox.addItem("Bangalore");
            optionbox.addItem("Chennai");
            optionbox.addItem("Delhi");
            optionbox.addItem("Jaipur");
            optionbox.addItem("Kolkata");
            optionbox.addItem("Mumbai");
            }

        else if(query.getSelectedItem().equals("Report on users who use power source -") || query.getSelectedItem().equals("User with Minimum cost of power who uses power source -") || query.getSelectedItem().equals("User with Maximum co2 emissions who uses power source -")){
            optionbox.setVisible(true);
            if(query.getSelectedItem().equals("Report on users who use power source -")){
            optionbox.addItem("All");
            }
            optionbox.addItem("Hydro");
            optionbox.addItem("Thermal");
            optionbox.addItem("Renewable");
            optionbox.addItem("Nuclear");
            }
        else{
            optionbox.setVisible(false);
        }
    }//GEN-LAST:event_queryItemStateChanged

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        JOptionPane.showMessageDialog(null, "Successfully Signed Out");
        this.dispose();
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        UpdateCost uc = new UpdateCost();
        uc.setVisible(true);
        uc.pack();
        uc.setLocationRelativeTo(null);
        uc.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
        this.dispose();
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        DeleteAccounts da = new DeleteAccounts();
        da.setVisible(true);
        da.pack();
        da.setLocationRelativeTo(null);
        da.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
        this.dispose();
    }//GEN-LAST:event_jButton4MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JComboBox<String> optionbox;
    private javax.swing.JComboBox<String> query;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
